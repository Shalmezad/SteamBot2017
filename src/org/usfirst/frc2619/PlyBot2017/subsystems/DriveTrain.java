// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2017.subsystems;

import org.usfirst.frc2619.PlyBot2017.MathUtil;
import org.usfirst.frc2619.PlyBot2017.Robot;
import org.usfirst.frc2619.PlyBot2017.RobotMap;
import org.usfirst.frc2619.PlyBot2017.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {
	private final double TICKS_PER_FOOT = 4273;
	private final int TICKS_PER_REVOLUTION = 1440;		// 4 x CPR
	
	private double Destination = 0;
	private double numFeet = 0;
	
	public boolean isReversed = false;
	
	public int DELIN_POW = 3;
	public double DEADBAND_X = 0.2;
	public double DEADBAND_Y = 0.1;
	public double DEADBAND_TWIST = 0.2;
	public double TURN_OUTER_SPEED = 0.5;
	public double TURN_INNER_SPEED = -0.5;
	
	public double VELOCITY = 4000;
	public double ACCELERATION = 1000;
	public double DISTANCE = 100000;
	
	private static final String DELIN_POW_KEY = "DELIN_POW";
	private static final String DEADBAND_X_KEY = "DEADBAND_X";
	private static final String DEADBAND_Y_KEY = "DEADBAND_Y";
	private static final String DEADBAND_TWIST_KEY = "DEADBAND_TWIST";
	private static final String TURN_OUTER_SPEED_KEY = "TURN_OUTER_SPEED";
	private static final String TURN_INNER_SPEED_KEY = "TURN_INNER_SPEED";
	private static final String POSITION_P_KEY = "POSITION_P";
	private static final String POSITION_D_KEY = "POSITION_D";
	private static final String POSITION_I_KEY = "POSITION_I";
	private static final String POSITION_F_KEY = "POSITION_F";
	private static final String ACCELERATION_KEY = "ACCELERATION";
	private static final String VELOCITY_KEY = "VELOCITY";
	private static final String DISTANCE_KEY = "DISTANCE";
	
	public final static double POSITION_P_CONSTANT = 0.1;
	private final static double POSITION_I_CONSTANT = 0;
	private final static double POSITION_D_CONSTANT = 0;
	private final static double POSITION_F_CONSTANT = 0.125;
	
	private final static int PID_PROFILE_POSITION = 1;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftFrontMotor = RobotMap.driveTrainLeftFrontMotor;
    private final CANTalon rightFrontMotor = RobotMap.driveTrainRightFrontMotor;
    private final CANTalon rightRearMotor = RobotMap.driveTrainRightRearMotor;
    private final CANTalon leftRearMotor = RobotMap.driveTrainLeftRearMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AHRS ahrs = RobotMap.driveTrainAHRS;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void writeDefaultValues() {
    	SmartDashboard.putNumber(DELIN_POW_KEY, DELIN_POW);
    	SmartDashboard.putNumber(DEADBAND_X_KEY, DEADBAND_X);
    	SmartDashboard.putNumber(DEADBAND_Y_KEY, DEADBAND_Y);
    	SmartDashboard.putNumber(DEADBAND_TWIST_KEY, DEADBAND_TWIST);
    	SmartDashboard.putNumber(TURN_OUTER_SPEED_KEY, TURN_OUTER_SPEED);
    	SmartDashboard.putNumber(TURN_INNER_SPEED_KEY, TURN_INNER_SPEED);
    	SmartDashboard.putNumber(POSITION_P_KEY, POSITION_P_CONSTANT);
    	SmartDashboard.putNumber(POSITION_I_KEY, POSITION_D_CONSTANT);
    	SmartDashboard.putNumber(POSITION_D_KEY, POSITION_I_CONSTANT);
    	SmartDashboard.putNumber(POSITION_F_KEY, POSITION_F_CONSTANT);
    	SmartDashboard.putNumber(ACCELERATION_KEY, ACCELERATION);
    	SmartDashboard.putNumber(VELOCITY_KEY, VELOCITY);
    	SmartDashboard.putNumber(DISTANCE_KEY, DISTANCE);
    }
    
    public void readControlValues() {
    	DELIN_POW = SmartDashboard.getInt(DELIN_POW_KEY);
    	DEADBAND_X = SmartDashboard.getNumber(DEADBAND_X_KEY);
    	DEADBAND_Y = SmartDashboard.getNumber(DEADBAND_Y_KEY);
    	DEADBAND_TWIST = SmartDashboard.getNumber(DEADBAND_TWIST_KEY);
    	TURN_OUTER_SPEED = SmartDashboard.getNumber(TURN_OUTER_SPEED_KEY);
    	TURN_INNER_SPEED = SmartDashboard.getNumber(TURN_INNER_SPEED_KEY);
    }
    
    public void writeDebugValues(){
    	SmartDashboard.putNumber("IMU_TotalYaw", ahrs.getAngle());
        SmartDashboard.putNumber("IMU_YawRateDPS", ahrs.getRate());
        SmartDashboard.putBoolean("IMU_Connected", ahrs.isConnected());
        SmartDashboard.putBoolean("IMU_IsCalibrating", ahrs.isCalibrating());
        SmartDashboard.putNumber("IMU_Yaw", ahrs.getYaw());
        SmartDashboard.putNumber("IMU_Pitch", ahrs.getPitch());
        SmartDashboard.putNumber("IMU_Roll", ahrs.getRoll());
        // Connectivity Debugging Support                                     
        SmartDashboard.putNumber(   "IMU_Byte_Count",       ahrs.getByteCount());
        SmartDashboard.putNumber(   "IMU_Update_Count",     ahrs.getUpdateCount());
        SmartDashboard.putNumber("LeftFrontMotorError", leftFrontMotor.getError());
        SmartDashboard.putNumber("LeftFrontMotorSetpoint", leftFrontMotor.getSetpoint());
        SmartDashboard.putNumber("LeftFrontMotorEncPosition", leftFrontMotor.getEncPosition());
        SmartDashboard.putNumber("LeftFrontMotorClosedLoopError", leftFrontMotor.getClosedLoopError());
    }
    
	public void run(double leftSpeed, double rightSpeed){
		leftFrontMotor.changeControlMode(TalonControlMode.PercentVbus);
		rightFrontMotor.changeControlMode(TalonControlMode.PercentVbus);
		SmartDashboard.putNumber("LeftSpeed", leftSpeed);
		SmartDashboard.putNumber("RightSpeed", rightSpeed);
		if(!isReversed) {
	    	leftFrontMotor.set(leftSpeed);
	    	
	    	rightFrontMotor.set(rightSpeed);
	    	
	    }
		else {
			leftFrontMotor.set(-1*rightSpeed);
	    	
	    	rightFrontMotor.set(-1*leftSpeed);
	    	
		}
	}
    
    public double getFeet() {
    	return (leftFrontMotor.getEncPosition()) / TICKS_PER_FOOT; // Gives the number of ticks the left front motor is currently at in feet.
    }
    
    public double getTicks() {
    	return (leftFrontMotor.getEncPosition()); // Gives the number of ticks the left front motor is currently at.
    }
    
    public void sendFeet(double f) {
    	Destination = 0;
    	numFeet = f;
    	Destination = getTicks() + (((numFeet * 1.017) - (12.147 / 12)) * TICKS_PER_FOOT);
    	SmartDashboard.putNumber("Destination", Destination);
    }
    
    public boolean isAtDestination() {
    	SmartDashboard.putNumber("getTicks()", getTicks());
    	if (numFeet > 0)
    	{
        	return getTicks() >= Destination;
    	}
    	else {
    		return getTicks() <= Destination;
    	}
    }
    
    public boolean isAtPIDDestination() {
    	/*if(leftFrontMotor.getSetpoint() == 0){
    		motionMagicMode();
    		return false;
    	}
    	else*/
    	return (this.leftFrontMotor.getEncPosition() > 1000) && (Math.abs(this.leftFrontMotor.getSetpoint() - this.leftFrontMotor.getEncPosition()) < 1000);
    }
    
    public void stop() {
    	Robot.driveTrain.run(0, 0);
    }
    
    public double getDegrees(){
    	return ahrs.getAngle();
    }
    
    public double getYaw(){
    	return ahrs.getYaw();
    }
    
    public void relTurn(double turnTo, double speed){
    	double leftSpeed =0, rightSpeed = 0;
    	double direction = MathUtil.calcDirection(getDegrees(), turnTo);
    	if(direction >= 0){
    		leftSpeed = speed;
    		rightSpeed = 0;
			//run(speed, -speed);
			SmartDashboard.putString("Direction", "right");
    	}
    	else if(direction < 0){
    		leftSpeed = 0;
    		rightSpeed = speed;
    		//run(-speed, speed);
    		SmartDashboard.putString("Direction", "left");
    	}
    	else{
    		leftSpeed = 0;
    		rightSpeed = 0;
    		//run(0,0);
    		SmartDashboard.putString("Direction", "none");
    	}
    	run(leftSpeed,rightSpeed);
	}
    
    public void absTurn(double degreeChange, double speed){
    	double leftSpeed = 0, rightSpeed = 0;
    	if (degreeChange > 0){
    		leftSpeed = TURN_OUTER_SPEED;
    		rightSpeed = -1 * TURN_INNER_SPEED;
    	}
    	else if (degreeChange < 0){
    		rightSpeed = TURN_OUTER_SPEED;
    		leftSpeed = -1 * TURN_INNER_SPEED;
    	}
    	run(leftSpeed,rightSpeed);
	}
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void motionMagicMode() {
    	leftFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	
    	leftFrontMotor.changeControlMode(CANTalon.TalonControlMode.MotionMagic);
    	rightFrontMotor.changeControlMode(CANTalon.TalonControlMode.MotionMagic);
    	
    	leftFrontMotor.setPosition(0);
    	rightFrontMotor.setPosition(0);
    	
    	//set position PIDF values
    	//REQUIRES F VALUE
    	setProfile(PID_PROFILE_POSITION);
    	double positionP = SmartDashboard.getNumber(POSITION_P_KEY);
    	double positionI = SmartDashboard.getNumber(POSITION_I_KEY);
    	double positionD = SmartDashboard.getNumber(POSITION_D_KEY);
    	double positionF = SmartDashboard.getNumber(POSITION_F_KEY);
    	leftFrontMotor.setProfile(PID_PROFILE_POSITION);
    	rightFrontMotor.setProfile(PID_PROFILE_POSITION);
    	leftFrontMotor.setPID(positionP, positionI, positionD);
    	leftFrontMotor.setF(positionF);
    	rightFrontMotor.setPID(positionP, positionI, positionD);
    	rightFrontMotor.setF(positionF);
    	
    	double acceleration = SmartDashboard.getNumber(ACCELERATION_KEY);
    	double velocity = SmartDashboard.getNumber(VELOCITY_KEY);
    	double distance = SmartDashboard.getNumber(DISTANCE_KEY);
    	
    	//gets ticks per rev??
    	//set acceleration and cruising velocity
    	//acceleration *= TICKS_PER_REVOLUTION;
    	//velocity *= TICKS_PER_REVOLUTION;
    	rightFrontMotor.setMotionMagicAcceleration(acceleration);
    	leftFrontMotor.setMotionMagicAcceleration(acceleration);
    	rightFrontMotor.setMotionMagicCruiseVelocity(velocity);
    	leftFrontMotor.setMotionMagicCruiseVelocity(velocity);
    	
    	//set target distance
    	//distance *= TICKS_PER_FOOT;
    	//sendFeet(distance);
    	rightFrontMotor.setSetpoint(-distance);
    	leftFrontMotor.setSetpoint(distance);
    }
    
    public void setEncZero(){
    	leftFrontMotor.setEncPosition(0);
    	rightFrontMotor.setEncPosition(0);
    	leftRearMotor.setEncPosition(0);
    	rightRearMotor.setEncPosition(0);
    }
    
    private void setProfile(int profile) {
		leftFrontMotor.setProfile(profile);
		rightFrontMotor.setProfile(profile);
	}
}

