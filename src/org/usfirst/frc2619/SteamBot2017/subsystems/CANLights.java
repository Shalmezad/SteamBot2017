// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2619.SteamBot2017.subsystems;

import org.usfirst.frc2619.SteamBot2017.Robot;
import org.usfirst.frc2619.SteamBot2017.RobotMap;
import org.usfirst.frc2619.SteamBot2017.TheChargeDashboard;
import org.usfirst.frc2619.SteamBot2017.commands.*;

import com.mindsensors.CANLight;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class CANLights extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	CANLight cANLight = new CANLight(3);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.secret code == hah

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void LightRun(int r, int g, int b) {
		cANLight.showRGB(r, g, b);
	}

	public void LightOff() {
		cANLight.showRGB(0, 0, 0);
	}

	public void displayCANLightValues() {
		TheChargeDashboard.putNumber("CANLightRed", 0);
		TheChargeDashboard.putNumber("CANLightGreen", 0);
		TheChargeDashboard.putNumber("CANLightBlue", 0);
	}

	public void displayCANLightValues(int r, int g, int b) {
		TheChargeDashboard.putNumber("CANLightRed", r);
		TheChargeDashboard.putNumber("CANLightGreen", g);
		TheChargeDashboard.putNumber("CANLightBlue", b);
	}

	public void chargeColor() {
		cANLight.writeRegister(1, 0.5, 0, 255, 0); // green
		cANLight.writeRegister(2, 0.5, 255, 255, 0); // yellow
		cANLight.cycle(1, 2);
	}

	public void blink() {
		cANLight.writeRegister(1, 0.5, (int)SmartDashboard.getNumber("CANLightRed", 0), (int)SmartDashboard.getNumber("CANLightGreen", 0), (int)SmartDashboard.getNumber("CANLightBlue", 0)); // current
		cANLight.writeRegister(2, 0.5, 0, 0, 0); // off
		cANLight.cycle(1, 2);
	}
	public void colorAlliance(){
		
		DriverStation ds = DriverStation.getInstance();
		if (ds.getAlliance() == DriverStation.Alliance.Red) {
			Robot.cANLights.LightRun(255, 0, 0);
			Robot.cANLights.displayCANLightValues(255, 0, 0);
		} else if (ds.getAlliance() == DriverStation.Alliance.Blue) {
			Robot.cANLights.LightRun(0, 0, 255);
			Robot.cANLights.displayCANLightValues(0, 0, 255);
		} else if (ds.getAlliance() == DriverStation.Alliance.Invalid) {
			Robot.cANLights.LightRun(255, 255, 0);
			Robot.cANLights.displayCANLightValues(255, 255, 0); // yellow
		}
		
	}
	
}
