// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2619.SteamBot2017.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2619.SteamBot2017.Robot;
import org.usfirst.frc2619.SteamBot2017.TheChargeDashboard;

/**
 *
 */
public class DriveToTarget extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_distanceFromTarget;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveToTarget(double distanceFromTarget) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_distanceFromTarget = distanceFromTarget;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.shifters);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.shifters.ShiftLow();
		if (!Robot.vision.hasTarget()) {
			end();
		}
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		double absMaxSpeed = 0.4;
		double turnMaxFactor = 0.5;

		double forwardFactor = (Robot.vision.getDistanceToTargetInFeet() / 7) + 0.2;
		double turnFactor = Math.pow(forwardFactor, 4) * (Robot.vision.getRobotAngleOffsetInDegrees() / 2);

		forwardFactor = (forwardFactor > 0 ? Math.min(1, forwardFactor) : Math.max(-1, forwardFactor));
		turnFactor = (turnFactor > 0 ? Math.min(turnMaxFactor, turnFactor) : Math.max(-turnMaxFactor, turnFactor));

		TheChargeDashboard.putNumber("ForwardFactor", forwardFactor);
		TheChargeDashboard.putNumber("TurnFactor", turnFactor);

		double leftSpeed = turnFactor + (0.8 * forwardFactor);
		double rightSpeed = -turnFactor + (0.8 * forwardFactor);

		leftSpeed = (leftSpeed > 0 ? Math.min(absMaxSpeed, leftSpeed) : Math.max(-absMaxSpeed, leftSpeed));
		rightSpeed = (rightSpeed > 0 ? Math.min(absMaxSpeed, rightSpeed) : Math.max(-absMaxSpeed, rightSpeed));

		TheChargeDashboard.putNumber("TargetLeftSpeed", leftSpeed);
		TheChargeDashboard.putNumber("TargetRightSpeed", rightSpeed);

		int leftSign = (int) Math.signum(leftSpeed);
		int rightSign = (int) Math.signum(rightSpeed);
		double minSpeed = 0.15;
		double finalLeftSpeed = leftSign * Math.max(minSpeed, Math.abs(leftSpeed));
		double finalRightSpeed = rightSign * Math.max(minSpeed, Math.abs(rightSpeed));

		Robot.driveTrain.run(finalLeftSpeed, finalRightSpeed);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return !Robot.vision.hasTarget() || Robot.vision.getDistanceToTargetInFeet() < m_distanceFromTarget;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrain.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
